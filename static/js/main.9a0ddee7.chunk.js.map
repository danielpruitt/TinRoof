{"version":3,"sources":["components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","App.js","serviceWorker.js","index.js"],"names":["Col","_ref","size","children","react_default","a","createElement","className","concat","split","map","join","Container","Row","App","state","persons","album","photos","getAlbum","event","preventDefault","value","target","console","log","Axios","get","then","res","data","_this","setState","getPhotos","_this2","this","_this3","Grid_Container","Grid_Row","Grid_Col","person","id","onClick","name","title","src","thumbnailUrl","alt","lib","header","trigger","url","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a0ddee7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//Col Component\r\n//the size prop will take in the the size of the column and add it to the className for the Materialize gridsystem\r\nexport const Col = ({size, children}) => (\r\n    <div className= {`${size.split(\" \").map(size => \"col \" + size).join(\" \")}`}>\r\n        {children}\r\n    </div>\r\n)\r\n\r\nexport default Col;","import React from \"react\";\r\n\r\n// Container component\r\nexport const Container = ({children}) => (\r\n    <div className=\"container\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\n\r\n// Row component, children will hold additional compoanents and content.\r\nexport const Row = ({children}) => (\r\n    <div className=\"row\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Row;","import React, { Component } from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport Col from \"./components/Grid/Col\";\nimport Container from \"./components/Grid/Container\";\nimport Row from \"./components/Grid/Row\";\nimport {Modal, Button} from \"react-materialize\";\n\n\nexport default class App extends React.Component {\n  state = {\n    persons: [],\n    album: [],\n    photos: []\n  };\n\n  //mounts the jsonplaceholder api using axios and sets the state to hold the data\n  componentDidMount() {\n    Axios.get('https://jsonplaceholder.typicode.com/users')\n      .then(res => {\n        const persons = res.data;\n        this.setState({ persons });\n        // console.log(this.state.persons)\n      })\n  }\n\n  //on click function that take in the id number set to a value and will open the album \n  getAlbum = (event) => {\n    event.preventDefault();\n    //grabs the value based off the persons.id and uses the id to query the url below\n    let value = event.target.value;\n    console.log(value)\n    Axios.get('https://jsonplaceholder.typicode.com/albums?userId=' + value)\n      .then(res => {\n        const album = res.data;\n        console.log(album);\n        this.setState({ album })\n      })\n  }\n\n  getPhotos = (event) => {\n    event.preventDefault();\n\n    // grabs the id from the album to pull up corresponding photos to the album.\n    let value = event.target.value;\n    console.log(value)\n    Axios.get('https://jsonplaceholder.typicode.com/photos?albumId=' + value)\n      .then(res => {\n        const photos = res.data;\n        console.log(photos);\n        this.setState({ photos })\n\n      })\n  }\n\n\n  // in the render the .map function will go through the state and each user will be added to the page\n  render() {\n    return (\n\n      <div>\n        <Container>\n          <Row>\n            <Col size=\"s4\">\n              <h4>Users</h4>\n              <ul>\n                {this.state.persons.map(person =>\n                  <li\n                    value={person.id}\n                    onClick={this.getAlbum}\n                  >\n                    {person.id}. {person.name}\n                  </li>\n\n                )}\n              </ul>\n\n            </Col>\n\n            <Col size=\"s4\">\n              <div>\n\n\n                <h4>Albums</h4>\n                {/* album mapping */}\n                <ul>\n                  {this.state.album.map(album =>\n                    <li\n                      value={album.id}\n                      onClick={this.getPhotos}\n                    >\n                      {album.title}\n\n                    </li>\n\n                  )}\n                </ul>\n              </div>\n            </Col>\n\n\n            <Col size=\"s4\">\n              <div>\n                <h4>Photos</h4>\n                {/* photo mapping */}\n                <ul>\n                  {this.state.photos.map(photos =>\n                    <div>\n\n                      <li>\n                        <p>{photos.title}</p>\n                        <br />\n                        <img className=\"img-thumbnail\" src={photos.thumbnailUrl} alt=\"thumbnail\" />\n                      </li>\n                      <br />\n\n                      {/* This is the modal trigger that will show the full size image and title and can be dismissed */}\n                      <Modal\n                        header={photos.title}\n                        trigger={<Button>Enlarge</Button>}>\n                        <img src={photos.url} alt=\"full size image\" />\n                      </Modal>\n                    </div>\n                    \n                )}\n                </ul>\n\n              </div>\n            </Col>\n          </Row>\n\n        </Container>\n\n\n\n      </div>\n\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}